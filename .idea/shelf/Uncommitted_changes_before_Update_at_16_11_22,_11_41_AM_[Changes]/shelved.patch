Index: app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.specknet.pdiotapp.live\n\nimport android.content.*\nimport android.graphics.Typeface\nimport android.os.*\nimport android.util.Log\nimport android.widget.Button\nimport android.widget.ImageView\nimport androidx.appcompat.app.AppCompatActivity\nimport androidx.core.content.ContextCompat\nimport com.github.mikephil.charting.charts.LineChart\nimport com.github.mikephil.charting.data.Entry\nimport com.github.mikephil.charting.data.LineData\nimport com.github.mikephil.charting.data.LineDataSet\nimport com.github.mikephil.charting.interfaces.datasets.ILineDataSet\nimport com.specknet.pdiotapp.R\nimport com.specknet.pdiotapp.RecordingActivity\nimport com.specknet.pdiotapp.bluetooth.ConnectingActivity\nimport com.specknet.pdiotapp.resultAnalysis\nimport com.specknet.pdiotapp.utils.Constants\nimport com.specknet.pdiotapp.utils.RESpeckLiveData\nimport com.specknet.pdiotapp.utils.ThingyLiveData\nimport org.json.JSONArray\nimport pl.droidsonroids.gif.GifDrawable\nimport pl.droidsonroids.gif.GifDrawableBuilder\nimport pl.droidsonroids.gif.GifImageView\nimport java.io.BufferedReader\nimport java.io.IOException\nimport java.io.InputStreamReader\nimport java.io.OutputStreamWriter\nimport java.net.HttpURLConnection\nimport java.net.URL\nimport java.net.URLEncoder\nimport java.nio.ByteBuffer\nimport java.nio.ByteOrder\n\n\nclass LiveDataActivity : AppCompatActivity() {\n    private val TAG = this.javaClass.name\n\n    // global graph variables\n    lateinit var dataSet_res_accel_x: LineDataSet\n    lateinit var dataSet_res_accel_y: LineDataSet\n    lateinit var dataSet_res_accel_z: LineDataSet\n\n    lateinit var dataSet_thingy_accel_x: LineDataSet\n    lateinit var dataSet_thingy_accel_y: LineDataSet\n    lateinit var dataSet_thingy_accel_z: LineDataSet\n\n    var time = 0f\n    lateinit var allRespeckData: LineData\n\n    lateinit var allThingyData: LineData\n\n    lateinit var respeckChart: LineChart\n    lateinit var thingyChart: LineChart\n\n//    lateinit var cur_activity: TextView\n    lateinit var menu_live: Button\n    lateinit var menu_history: Button\n    lateinit var menu_record: Button\n    lateinit var menu_connect: Button\n\n    lateinit var gifImageView: GifImageView\n    lateinit var imageViewA: ImageView\n    lateinit var imageViewB: ImageView\n\n    // global broadcast receiver so we can unregister it\n    lateinit var respeckLiveUpdateReceiver: BroadcastReceiver\n    lateinit var thingyLiveUpdateReceiver: BroadcastReceiver\n    lateinit var looperRespeck: Looper\n    lateinit var looperThingy: Looper\n\n    val filterTestRespeck = IntentFilter(Constants.ACTION_RESPECK_LIVE_BROADCAST)\n    val filterTestThingy = IntentFilter(Constants.ACTION_THINGY_BROADCAST)\n\n    private var myService: ActivityIdentifyService.ActivityIdentifyBinder? = null\n    private var mIsBound = false\n    private val mServiceConnection: ServiceConnection = object : ServiceConnection {\n        override fun onServiceConnected(name: ComponentName, service: IBinder) {\n            Log.d(TAG, \"onServiceConnected: LiveDataActivity\")\n            myService = service as ActivityIdentifyService.ActivityIdentifyBinder\n            mIsBound = true\n        }\n\n        override fun onServiceDisconnected(name: ComponentName) {\n            Log.d(TAG, \"onServiceDisconnected: onServiceDisconnected\")\n            mIsBound = false\n        }\n    }\n\n\n//    var gifFromResource = GifDrawable(resources, R.drawable.walking)\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContentView(R.layout.activity_live_data)\n\n        setupCharts()\n\n//        cur_activity = findViewById(R.id.cur_activity_txt)\n//        cur_activity.setText(\"Sitting\")\n//        cur_activity.setTextSize(TypedValue.COMPLEX_UNIT_DIP, 20f)\n        menu_live=findViewById(R.id.live_live_button)\n        menu_history=findViewById(R.id.live_history_button)\n        menu_record=findViewById(R.id.live_record_button)\n        menu_connect=findViewById(R.id.live_ble_button)\n        val iconfont = Typeface.createFromAsset(assets, \"iconfont.ttf\")\n        menu_live.setTypeface(iconfont)\n        menu_history.setTypeface(iconfont)\n        menu_record.setTypeface(iconfont)\n        menu_connect.setTypeface(iconfont)\n\n        setupClickListeners()\n\n        startService(Intent(this, ActivityIdentifyService::class.java))\n        this.bindService(\n            Intent(this, ActivityIdentifyService::class.java),\n            mServiceConnection, BIND_AUTO_CREATE\n        )\n\n        // set up the broadcast receiver\n        respeckLiveUpdateReceiver = object : BroadcastReceiver() {\n            override fun onReceive(context: Context, intent: Intent) {\n\n                Log.i(\"thread\", \"I am running on thread = \" + Thread.currentThread().name)\n\n                val action = intent.action\n\n                if (action == Constants.ACTION_RESPECK_LIVE_BROADCAST) {\n\n                    val liveData =\n                        intent.getSerializableExtra(Constants.RESPECK_LIVE_DATA) as RESpeckLiveData\n                    Log.d(\"Live\", \"onReceive: liveData = \" + liveData)\n\n                    // get all relevant intent contents\n                    val x = liveData.accelX\n                    val y = liveData.accelY\n                    val z = liveData.accelZ\n                    \n\n\n                    time += 1\n                    updateGraph(\"respeck\", x, y, z)\n\n\n                }\n            }\n        }\n\n        // register receiver on another thread\n        val handlerThreadRespeck = HandlerThread(\"bgThreadRespeckLive\")\n        handlerThreadRespeck.start()\n        looperRespeck = handlerThreadRespeck.looper\n        val handlerRespeck = Handler(looperRespeck)\n        this.registerReceiver(respeckLiveUpdateReceiver, filterTestRespeck, null, handlerRespeck)\n\n        // set up the broadcast receiver\n        thingyLiveUpdateReceiver = object : BroadcastReceiver() {\n            override fun onReceive(context: Context, intent: Intent) {\n\n                Log.i(\"thread\", \"I am running on thread = \" + Thread.currentThread().name)\n\n                val action = intent.action\n\n                if (action == Constants.ACTION_THINGY_BROADCAST) {\n\n                    val liveData =\n                        intent.getSerializableExtra(Constants.THINGY_LIVE_DATA) as ThingyLiveData\n                    Log.d(\"Live\", \"onReceive: liveData = \" + liveData)\n\n                    // get all relevant intent contents\n                    val x = liveData.accelX\n                    val y = liveData.accelY\n                    val z = liveData.accelZ\n\n                    time += 1\n                    updateGraph(\"thingy\", x, y, z)\n\n                }\n            }\n        }\n\n        // register receiver on another thread\n        val handlerThreadThingy = HandlerThread(\"bgThreadThingyLive\")\n        handlerThreadThingy.start()\n        looperThingy = handlerThreadThingy.looper\n        val handlerThingy = Handler(looperThingy)\n        this.registerReceiver(thingyLiveUpdateReceiver, filterTestThingy, null, handlerThingy)\n\n    }\n\n\n    fun setupCharts() {\n        respeckChart = findViewById(R.id.respeck_chart)\n        thingyChart = findViewById(R.id.thingy_chart)\n\n        // Respeck\n\n        time = 0f\n        val entries_res_accel_x = ArrayList<Entry>()\n        val entries_res_accel_y = ArrayList<Entry>()\n        val entries_res_accel_z = ArrayList<Entry>()\n\n        dataSet_res_accel_x = LineDataSet(entries_res_accel_x, \"Accel X\")\n        dataSet_res_accel_y = LineDataSet(entries_res_accel_y, \"Accel Y\")\n        dataSet_res_accel_z = LineDataSet(entries_res_accel_z, \"Accel Z\")\n\n        dataSet_res_accel_x.setDrawCircles(false)\n        dataSet_res_accel_y.setDrawCircles(false)\n        dataSet_res_accel_z.setDrawCircles(false)\n\n        dataSet_res_accel_x.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.red\n            )\n        )\n        dataSet_res_accel_y.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.green\n            )\n        )\n        dataSet_res_accel_z.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.blue\n            )\n        )\n\n        val dataSetsRes = ArrayList<ILineDataSet>()\n        dataSetsRes.add(dataSet_res_accel_x)\n        dataSetsRes.add(dataSet_res_accel_y)\n        dataSetsRes.add(dataSet_res_accel_z)\n\n        allRespeckData = LineData(dataSetsRes)\n        respeckChart.data = allRespeckData\n        respeckChart.invalidate()\n\n        // Thingy\n\n        time = 0f\n        val entries_thingy_accel_x = ArrayList<Entry>()\n        val entries_thingy_accel_y = ArrayList<Entry>()\n        val entries_thingy_accel_z = ArrayList<Entry>()\n\n        dataSet_thingy_accel_x = LineDataSet(entries_thingy_accel_x, \"Accel X\")\n        dataSet_thingy_accel_y = LineDataSet(entries_thingy_accel_y, \"Accel Y\")\n        dataSet_thingy_accel_z = LineDataSet(entries_thingy_accel_z, \"Accel Z\")\n\n        dataSet_thingy_accel_x.setDrawCircles(false)\n        dataSet_thingy_accel_y.setDrawCircles(false)\n        dataSet_thingy_accel_z.setDrawCircles(false)\n\n        dataSet_thingy_accel_x.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.red\n            )\n        )\n        dataSet_thingy_accel_y.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.green\n            )\n        )\n        dataSet_thingy_accel_z.setColor(\n            ContextCompat.getColor(\n                this,\n                R.color.blue\n            )\n        )\n\n        val dataSetsThingy = ArrayList<ILineDataSet>()\n        dataSetsThingy.add(dataSet_thingy_accel_x)\n        dataSetsThingy.add(dataSet_thingy_accel_y)\n        dataSetsThingy.add(dataSet_thingy_accel_z)\n\n        allThingyData = LineData(dataSetsThingy)\n        thingyChart.data = allThingyData\n        thingyChart.invalidate()\n    }\n\n    fun updateGraph(graph: String, x: Float, y: Float, z: Float) {\n        // take the first element from the queue\n        // and update the graph with it\n        if (graph == \"respeck\") {\n            dataSet_res_accel_x.addEntry(Entry(time, x))\n            dataSet_res_accel_y.addEntry(Entry(time, y))\n            dataSet_res_accel_z.addEntry(Entry(time, z))\n\n            runOnUiThread {\n                allRespeckData.notifyDataChanged()\n                respeckChart.notifyDataSetChanged()\n                respeckChart.invalidate()\n                respeckChart.setVisibleXRangeMaximum(150f)\n                respeckChart.moveViewToX(respeckChart.lowestVisibleX + 40)\n            }\n        } else if (graph == \"thingy\") {\n            dataSet_thingy_accel_x.addEntry(Entry(time, x))\n            dataSet_thingy_accel_y.addEntry(Entry(time, y))\n            dataSet_thingy_accel_z.addEntry(Entry(time, z))\n\n            runOnUiThread {\n                allThingyData.notifyDataChanged()\n                thingyChart.notifyDataSetChanged()\n                thingyChart.invalidate()\n                thingyChart.setVisibleXRangeMaximum(150f)\n                thingyChart.moveViewToX(thingyChart.lowestVisibleX + 40)\n            }\n        }\n\n\n    }\n\n    private fun getActivity(reSpeckLiveData: RESpeckLiveData ){\n        try {\n            val byteBuffer: ByteBuffer = ByteBuffer.allocateDirect(4 * 50 * 12)\n            // Creates inputs for reference.\n            //val inputFeature0 = TensorBuffer.createFixedSize(intArrayOf(1, 50, 12), DataType.FLOAT32)\n            byteBuffer.order(ByteOrder.nativeOrder());\n            // ADD VALUES\n            for (j in 0 until 50) {\n                byteBuffer.putFloat(reSpeckLiveData.accelX)\n                byteBuffer.putFloat(reSpeckLiveData.accelY)\n                byteBuffer.putFloat(reSpeckLiveData.accelZ)\n                byteBuffer.putFloat(reSpeckLiveData.gyro.x)\n                byteBuffer.putFloat(reSpeckLiveData.gyro.y)\n                byteBuffer.putFloat(reSpeckLiveData.gyro.z)\n\n                byteBuffer.putFloat(reSpeckLiveData.accelX)\n                byteBuffer.putFloat(reSpeckLiveData.accelY)\n                byteBuffer.putFloat(reSpeckLiveData.accelZ)\n                byteBuffer.putFloat(reSpeckLiveData.gyro.x)\n                byteBuffer.putFloat(reSpeckLiveData.gyro.y)\n                byteBuffer.putFloat(reSpeckLiveData.gyro.z)\n            }\n\n            sendPostRequest(byteBuffer)\n            Log.d(TAG,\"function called\")\n\n        } catch (e: IOException) {\n            // TODO Handle the exception\n        }\n    }\n\n    fun sendPostRequest(data: ByteBuffer) {\n        val arr = ByteArray(data.remaining())\n        data.get(arr)\n\n        val jsonArray = JSONArray(arr);\n\n        var reqParam = URLEncoder.encode(\"liveData\", \"UTF-8\") + \"=\" + jsonArray\n        val mURL = URL(\"<Your API Link>\")\n\n        with(mURL.openConnection() as HttpURLConnection) {\n            // optional default is GET\n            requestMethod = \"POST\"\n\n            val wr = OutputStreamWriter(getOutputStream());\n            wr.write(reqParam);\n            wr.flush();\n\n            println(\"URL : $url\")\n            println(\"Response Code : $responseCode\")\n\n            BufferedReader(InputStreamReader(inputStream)).use {\n                val response = StringBuffer()\n\n                var inputLine = it.readLine()\n                while (inputLine != null) {\n                    response.append(inputLine)\n                    inputLine = it.readLine()\n                }\n                println(\"Response from cloud: $response\")\n\n            }\n        }\n    }\n\n\n\n    fun setupClickListeners() {\n        menu_connect.setOnClickListener {\n            val intent = Intent(this, ConnectingActivity::class.java)\n            startActivity(intent)\n\n//            gifImageView.setImageResource(R.drawable.walking)\n//            multiCallback.removeView(imageViewB) //remove second view\n//\n//            val newGifDrawable: GifDrawable = loadGif(\"gif_sample2.gif\")\n\n            /**\n             * Set new gif. This call will stuck first gif animation.\n             *  But the same problem will be if we call  'imageViewB.setImageDrawable(null)' or  'imageViewB.setImageBitmap(...)' etc\n             *\n             */\n            /**\n             * Set new gif. This call will stuck first gif animation.\n             * But the same problem will be if we call  'imageViewB.setImageDrawable(null)' or  'imageViewB.setImageBitmap(...)' etc\n             *\n             */\n//            imageViewB.setImageDrawable(newGifDrawable)\n        }\n\n        menu_record.setOnClickListener {\n            val intent = Intent(this, RecordingActivity::class.java)\n            startActivity(intent)\n        }\n\n        menu_history.setOnClickListener {\n            val intent = Intent(this, resultAnalysis::class.java)\n            startActivity(intent)\n        }\n    }\n\n    fun loadGif(assetName: String): GifDrawable? {\n        val gifBuilder = GifDrawableBuilder()\n        try {\n            return gifBuilder.from(assets, assetName).build()\n        } catch (e: IOException) {\n            Log.d(\"Load GIF\", \"loadGif error\", e)\n        }\n        return null\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n        unbindService(mServiceConnection)\n        mIsBound = false\n        unregisterReceiver(respeckLiveUpdateReceiver)\n        unregisterReceiver(thingyLiveUpdateReceiver)\n        looperRespeck.quit()\n        looperThingy.quit()\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt b/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt
--- a/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt	(revision adf21b948f2ddaf3e202ee053e2163e832e3ead5)
+++ b/app/src/main/java/com/specknet/pdiotapp/live/LiveDataActivity.kt	(date 1668598871727)
@@ -137,7 +137,7 @@
                     val x = liveData.accelX
                     val y = liveData.accelY
                     val z = liveData.accelZ
-                    
+
 
 
                     time += 1
